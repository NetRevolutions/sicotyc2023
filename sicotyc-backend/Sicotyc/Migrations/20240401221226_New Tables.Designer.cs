// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Sicotyc.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240401221226_New Tables")]
    partial class NewTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CompanyCondition")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyFiscalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyState")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("DeleteDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOn");

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedOn");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CompanyId");

                    b.ToTable("COMPANY", "SCT");
                });

            modelBuilder.Entity("Entities.Models.CompanyCompanyType", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyId", "CompanyTypeId");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("COMPANY_COMPANY_TYPE", "SCT");
                });

            modelBuilder.Entity("Entities.Models.CompanyType", b =>
                {
                    b.Property<Guid>("CompanyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("DeleteDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOn");

                    b.Property<DateTime?>("UpdateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedOn");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CompanyTypeId");

                    b.ToTable("COMPANY_TYPE", "SCT");
                });

            modelBuilder.Entity("Entities.Models.ComplementTransport", b =>
                {
                    b.Property<Guid>("ComplementTransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditinalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("DeleteDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOn");

                    b.Property<DateTime?>("FabricationYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModelYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TechnicalReviewExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransportDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedOn");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("VehicleConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VehicleQualificationExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleQualificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComplementTransportId");

                    b.HasIndex("TransportDetailId");

                    b.ToTable("COMPLEMENT_TRANSPORT", "SCT");
                });

            modelBuilder.Entity("Entities.Models.Driver", b =>
                {
                    b.Property<Guid>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AntecedentePolicialesExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AntecedentesPenalesExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOn");

                    b.Property<DateTime?>("DocumentExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnableIMO")
                        .HasColumnType("bit");

                    b.Property<string>("FirsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenceClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LicenseExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedOn");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("DriverId");

                    b.ToTable("DRIVER", "SCT");
                });

            modelBuilder.Entity("Entities.Models.LookupCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LookupCodeId");

                    b.Property<DateTime>("CreateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("DeleteDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOn");

                    b.Property<Guid>("LookupCodeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LookupCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LookupCodeOrder")
                        .HasColumnType("int");

                    b.Property<string>("LookupCodeValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedOn");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("LookupCodeGroupId");

                    b.ToTable("LOOKUP_CODE", "SCT");

                    b.HasData(
                        new
                        {
                            Id = new Guid("867c1549-7132-4e8e-174a-08da70ae983a"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3268),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("71b0316a-9831-499a-b9bb-08da70ae70ed"),
                            LookupCodeName = "Por Eje",
                            LookupCodeOrder = 1,
                            LookupCodeValue = "ByAxis"
                        },
                        new
                        {
                            Id = new Guid("7e603067-a1ed-4b52-174b-08da70ae983a"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3272),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("71b0316a-9831-499a-b9bb-08da70ae70ed"),
                            LookupCodeName = "Por Eje2",
                            LookupCodeOrder = 2,
                            LookupCodeValue = "ByAxis2"
                        },
                        new
                        {
                            Id = new Guid("1a011e51-2471-4ccd-174c-08da70ae983a"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3274),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("71b0316a-9831-499a-b9bb-08da70ae70ed"),
                            LookupCodeName = "Por Eje3",
                            LookupCodeOrder = 3,
                            LookupCodeValue = "ByAxis3"
                        },
                        new
                        {
                            Id = new Guid("23078793-cd0a-4718-2aa4-08da71da4714"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3276),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("71b0316a-9831-499a-b9bb-08da70ae70ed"),
                            LookupCodeName = "Por Eje4",
                            LookupCodeOrder = 4,
                            LookupCodeValue = "ByAxis4"
                        },
                        new
                        {
                            Id = new Guid("47b84a27-c75a-44d3-174d-08da70ae983a"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3278),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("71b0316a-9831-499a-b9bb-08da70ae70ed"),
                            LookupCodeName = "Por Eje5",
                            LookupCodeOrder = 5,
                            LookupCodeValue = "ByAxis5"
                        },
                        new
                        {
                            Id = new Guid("2d253e01-afa1-4a59-bc6a-26526f0d8498"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3280),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("86d227dc-e0ca-4a78-85f4-83a6eb30cbc7"),
                            LookupCodeName = "Documento Nacional de Identidad",
                            LookupCodeOrder = 1,
                            LookupCodeValue = "DNI"
                        },
                        new
                        {
                            Id = new Guid("8dc0180a-2ffc-4807-803a-37aab6ecaab2"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3282),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("86d227dc-e0ca-4a78-85f4-83a6eb30cbc7"),
                            LookupCodeName = "Carnet de Extranjería",
                            LookupCodeOrder = 2,
                            LookupCodeValue = "CEX"
                        },
                        new
                        {
                            Id = new Guid("de0cc597-ad66-4497-acab-33617eb077bd"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3284),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("86d227dc-e0ca-4a78-85f4-83a6eb30cbc7"),
                            LookupCodeName = "Pasaporte",
                            LookupCodeOrder = 3,
                            LookupCodeValue = "PASS"
                        },
                        new
                        {
                            Id = new Guid("792f255c-2b8b-42e6-9968-2855373e5c86"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3286),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("86d227dc-e0ca-4a78-85f4-83a6eb30cbc7"),
                            LookupCodeName = "Partida de Nacimiento",
                            LookupCodeOrder = 4,
                            LookupCodeValue = "PNAC"
                        },
                        new
                        {
                            Id = new Guid("b2a7d680-b5dc-41d1-9792-695602fc2954"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3288),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("86d227dc-e0ca-4a78-85f4-83a6eb30cbc7"),
                            LookupCodeName = "Carnet de FFAA",
                            LookupCodeOrder = 5,
                            LookupCodeValue = "CFFAA"
                        },
                        new
                        {
                            Id = new Guid("fe8b2536-5a20-4680-8dfe-526000df87e1"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3289),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("86d227dc-e0ca-4a78-85f4-83a6eb30cbc7"),
                            LookupCodeName = "Pasaporte Diplomatico",
                            LookupCodeOrder = 6,
                            LookupCodeValue = "PASSD"
                        },
                        new
                        {
                            Id = new Guid("eaf628ee-9413-472e-a5b7-3c9d45f10cf0"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3291),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("e4d10bc8-a160-4a9d-bc87-c94cf849e14c"),
                            LookupCodeName = "Empresa de Transporte",
                            LookupCodeOrder = 1,
                            LookupCodeValue = "ET"
                        },
                        new
                        {
                            Id = new Guid("58250d62-975a-4883-81f7-946c91cf2dec"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3293),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("e4d10bc8-a160-4a9d-bc87-c94cf849e14c"),
                            LookupCodeName = "Otros",
                            LookupCodeOrder = 2,
                            LookupCodeValue = "OT"
                        },
                        new
                        {
                            Id = new Guid("6963984f-c5e0-4ed9-9647-46ac7054e344"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3295),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("c6ed82d5-4a24-464b-bebd-f33c0b7f7d80"),
                            LookupCodeName = "IMPORTACION",
                            LookupCodeOrder = 1,
                            LookupCodeValue = "IMPO"
                        },
                        new
                        {
                            Id = new Guid("e83581fc-e05c-4c80-b5c2-e381fd7765d7"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3298),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("c6ed82d5-4a24-464b-bebd-f33c0b7f7d80"),
                            LookupCodeName = "EXPORTACION",
                            LookupCodeOrder = 2,
                            LookupCodeValue = "EXPO"
                        },
                        new
                        {
                            Id = new Guid("5f38d3fd-f34e-45eb-aebf-512f5ebd94ee"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3299),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("c6ed82d5-4a24-464b-bebd-f33c0b7f7d80"),
                            LookupCodeName = "CARGA SUELTA",
                            LookupCodeOrder = 3,
                            LookupCodeValue = "CS"
                        },
                        new
                        {
                            Id = new Guid("fdc11a23-1dc7-4160-bb9d-019579c56e46"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3301),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("c6ed82d5-4a24-464b-bebd-f33c0b7f7d80"),
                            LookupCodeName = "DEVOLUCIÓN DE VACÍO",
                            LookupCodeOrder = 4,
                            LookupCodeValue = "DV"
                        },
                        new
                        {
                            Id = new Guid("e5c70df3-cf54-477f-881d-7d142f0b51aa"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3303),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("c6ed82d5-4a24-464b-bebd-f33c0b7f7d80"),
                            LookupCodeName = "TRACCIÓN",
                            LookupCodeOrder = 5,
                            LookupCodeValue = "TX"
                        },
                        new
                        {
                            Id = new Guid("8bd83659-b611-488d-aaac-e5d418bac06c"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3305),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("c6ed82d5-4a24-464b-bebd-f33c0b7f7d80"),
                            LookupCodeName = "CAMA BAJA",
                            LookupCodeOrder = 6,
                            LookupCodeValue = "CB"
                        },
                        new
                        {
                            Id = new Guid("752ce625-da67-4842-b19d-18c5572dbbce"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3306),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("cda56e87-1b44-4625-9f19-ac7eb282a9b7"),
                            LookupCodeName = "USERNAME",
                            LookupCodeOrder = 1,
                            LookupCodeValue = "UserName"
                        },
                        new
                        {
                            Id = new Guid("37a294bb-d8e2-4655-80a8-a2fe719766d4"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3308),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("cda56e87-1b44-4625-9f19-ac7eb282a9b7"),
                            LookupCodeName = "FIRSTNAME",
                            LookupCodeOrder = 2,
                            LookupCodeValue = "FirstName"
                        },
                        new
                        {
                            Id = new Guid("e129c250-de59-45d3-8794-58e073ff8064"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3310),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("cda56e87-1b44-4625-9f19-ac7eb282a9b7"),
                            LookupCodeName = "LASTNAME",
                            LookupCodeOrder = 3,
                            LookupCodeValue = "LastName"
                        },
                        new
                        {
                            Id = new Guid("6b1b516f-9073-4657-8a4c-9cb7ebe8ea25"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3313),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("cda56e87-1b44-4625-9f19-ac7eb282a9b7"),
                            LookupCodeName = "EMAIL",
                            LookupCodeOrder = 4,
                            LookupCodeValue = "Email"
                        },
                        new
                        {
                            Id = new Guid("1aec098a-859a-4586-80b6-b6f4beb848fb"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3315),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("cda56e87-1b44-4625-9f19-ac7eb282a9b7"),
                            LookupCodeName = "ID",
                            LookupCodeOrder = 5,
                            LookupCodeValue = "Id"
                        },
                        new
                        {
                            Id = new Guid("50bd3490-2377-4945-9229-f018f6b07bf8"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3317),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("cda56e87-1b44-4625-9f19-ac7eb282a9b7"),
                            LookupCodeName = "PHONENUMBER",
                            LookupCodeOrder = 6,
                            LookupCodeValue = "PhoneNumber"
                        },
                        new
                        {
                            Id = new Guid("f7ab3cf1-afe9-4b2b-977f-953d9f3b9275"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3319),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("cda56e87-1b44-4625-9f19-ac7eb282a9b7"),
                            LookupCodeName = "ROLE",
                            LookupCodeOrder = 7,
                            LookupCodeValue = "Role"
                        },
                        new
                        {
                            Id = new Guid("8e009c6d-5920-4135-8a26-49ec04c6e7d5"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(3320),
                            CreatedBy = "SYSTEM",
                            LookupCodeGroupId = new Guid("cda56e87-1b44-4625-9f19-ac7eb282a9b7"),
                            LookupCodeName = "IMG",
                            LookupCodeOrder = 8,
                            LookupCodeValue = "Img"
                        });
                });

            modelBuilder.Entity("Entities.Models.LookupCodeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LookupCodeGroupId");

                    b.Property<DateTime>("CreateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("DeleteDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("LookupCodeGroupName");

                    b.Property<DateTime?>("UpdateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedOn");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("LOOKUP_CODE_GROUP", "SCT");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71b0316a-9831-499a-b9bb-08da70ae70ed"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(2937),
                            CreatedBy = "SYSTEM",
                            Name = "TIPO DE PAGO PEAJE"
                        },
                        new
                        {
                            Id = new Guid("86d227dc-e0ca-4a78-85f4-83a6eb30cbc7"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(2953),
                            CreatedBy = "SYSTEM",
                            Name = "TIPO DE DOC. IDENTIDAD"
                        },
                        new
                        {
                            Id = new Guid("e4d10bc8-a160-4a9d-bc87-c94cf849e14c"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(2956),
                            CreatedBy = "SYSTEM",
                            Name = "TIPO DE EMPRESA"
                        },
                        new
                        {
                            Id = new Guid("c6ed82d5-4a24-464b-bebd-f33c0b7f7d80"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(2957),
                            CreatedBy = "SYSTEM",
                            Name = "TIPO DE SERVICIO"
                        },
                        new
                        {
                            Id = new Guid("cda56e87-1b44-4625-9f19-ac7eb282a9b7"),
                            CreateDtm = new DateTime(2024, 4, 1, 22, 12, 26, 451, DateTimeKind.Utc).AddTicks(2980),
                            CreatedBy = "SYSTEM",
                            Name = "CLAIMS PERMITIDOS"
                        });
                });

            modelBuilder.Entity("Entities.Models.TransportDetail", b =>
                {
                    b.Property<Guid>("TransportDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Axles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Large")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Width")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportDetailId");

                    b.ToTable("TRANSPORT_DETAIL", "SCT");
                });

            modelBuilder.Entity("Entities.Models.UnitTransport", b =>
                {
                    b.Property<Guid>("UnitTransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditinalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("DeleteDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOn");

                    b.Property<DateTime?>("FabricationYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fuel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModelYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SoatExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TechnicalReviewExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransportDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedOn");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("VehicleConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VehicleQualificationExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleQualificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitTransportId");

                    b.HasIndex("TransportDetailId");

                    b.ToTable("UNIT_TRANSPORT", "SCT");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.UserCompany", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("USER_COMPANY", "SCT");
                });

            modelBuilder.Entity("Entities.Models.UserDetail", b =>
                {
                    b.Property<Guid>("UserDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOn");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedOn");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("UserDetailId");

                    b.HasIndex("Id");

                    b.ToTable("USER_DETAIL", "SCT");
                });

            modelBuilder.Entity("Entities.Models.WhareHouse", b =>
                {
                    b.Property<Guid>("WhareHouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AditionalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AliasName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime?>("DeleteDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedOn");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDtm")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdatedOn");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("WhareHouseId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.ToTable("WHAREHOUSE", "SCT");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c9242d5d-3e04-43ce-ab84-48bd86de8cf2",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "64b2fd57-3f89-401f-8a2c-d23703331a5d",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "1069bf80-5c6b-4823-a369-ccadcd87181b",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.CompanyCompanyType", b =>
                {
                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("Entities.Models.ComplementTransport", b =>
                {
                    b.HasOne("Entities.Models.TransportDetail", "TransportDetail")
                        .WithMany()
                        .HasForeignKey("TransportDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportDetail");
                });

            modelBuilder.Entity("Entities.Models.LookupCode", b =>
                {
                    b.HasOne("Entities.Models.LookupCodeGroup", "LookupCodeGroup")
                        .WithMany("LookupCodes")
                        .HasForeignKey("LookupCodeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookupCodeGroup");
                });

            modelBuilder.Entity("Entities.Models.UnitTransport", b =>
                {
                    b.HasOne("Entities.Models.TransportDetail", "TransportDetail")
                        .WithMany()
                        .HasForeignKey("TransportDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportDetail");
                });

            modelBuilder.Entity("Entities.Models.UserCompany", b =>
                {
                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserDetail", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.WhareHouse", b =>
                {
                    b.HasOne("Entities.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Driver", null)
                        .WithMany("WhareHousesEnabled")
                        .HasForeignKey("DriverId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Driver", b =>
                {
                    b.Navigation("WhareHousesEnabled");
                });

            modelBuilder.Entity("Entities.Models.LookupCodeGroup", b =>
                {
                    b.Navigation("LookupCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
